var ids = {'card': null, 'door': null, 'no-access': null};
var searchUrls = {'card': '/json/search/card_holder', 'door': '/json/search/door_plan'};
var tableSelector = {'card': '#card-holders', 'door': '#door-plans', 'no-access': '#card-holders-door'};
var cachedSearchs = {'card': {}, 'door': {}, 'no-access': {}};
var noResultsData = [{"value": "There are no results", "id": "", "plan_id": "", "type": "card", "errors": []}];
var baseUrl = '';

$(document).ready(function()
{
    if ($('#BASE_URL').length > 0)
        baseUrl = $.trim($('#BASE_URL').val());

    $.xhrPool = [];
    $.xhrPool.abortAll = function() {
        $(this).each(function(idx, jqXHR) {
            jqXHR.abort();
        });
    };
    $.ajaxSetup({
        beforeSend: function(jqXHR) {
            $.xhrPool.push(jqXHR);
        }
    });
    $(document).ajaxComplete(function() {
        $.xhrPool.pop();
    });

    if ($('#btn_card_holder_name').length > 0)
    {
        $('#btn_card_holder_name').on('click', function()
        {
            var fieldId = $(this).attr('id').replace('btn_', '');
            var data = {'Search-type': 'card',
                        'Search-name': $.trim($('#' + fieldId).val()),
                        'Search-user_id': $('#user_id').val(),
                        'field_id': 'grp_' + fieldId};

            noResultsData[0]['type'] = data['Search-type'];
            noResultsData[0]['errors'] = ['Enter Card Holder First Name or Last Name'];

            if ($.trim(data['Search-name']) == '')
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], noResultsData);
            else if ($.isDefined(cachedSearchs[data['Search-type']][data['Search-name']]))
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], cachedSearchs[data['Search-type']][data['Search-name']]);
            else
                retrieve(searchUrls.card, data);

            return false;
        });
        $('#card_holder_name').on('keydown', function(event)
        {
            if(event.keyCode == '13')
                $('#btn_card_holder_name').trigger('click');
        });
    }
    if ($('#btn_card_holder_uid').length > 0)
    {
        $('#btn_card_holder_uid').on('click', function()
        {
            var fieldId = $(this).attr('id').replace('btn_', '');
            var data = {'Search-type': 'card',
                        'Search-uid': $.trim($('#' + fieldId).val()),
                        'Search-user_id': $('#user_id').val(),
                        'field_id': 'grp_' + fieldId};

            noResultsData[0]['type'] = data['Search-type'];
            noResultsData[0]['errors'] = ['A full 9 digit UCLA UID is required'];

            if ($.trim(data['Search-uid']) == '')
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], noResultsData);
            else if ($.isDefined(cachedSearchs[data['Search-type']][data['Search-uid']]))
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], cachedSearchs[data['Search-type']][data['Search-uid']]);
            else
            {
                if (isValidUID(data['Search-uid']))
                    retrieve(searchUrls.card, data);
                else
                    showPopover('#' + data['field_id'], noResultsData['errors']);
            }

            return false;
        });
        $('#card_holder_uid').on('keydown', function(event)
        {
            if(event.keyCode == '13')
                $('#btn_card_holder_uid').trigger('click');
        });
    }
    //--------------------------------------------
    if ($('#btn_card_holder_name_modal').length > 0)
    {
        $('#btn_card_holder_name_modal').on('click', function()
        {
            var fieldId = $(this).attr('id').replace('btn_', '');
            var data = {'Search-type': 'no-access',
                        'Search-name': $.trim($('#' + fieldId).val()),
                        'Search-user_id': $('#user_id').val(),
                        'field_id': 'grp_' + fieldId};

            noResultsData[0]['type'] = data['Search-type'];
            noResultsData[0]['errors'] = ['Enter Card Holder First Name or Last Name'];
            $(tableSelector[data['Search-type']]).removeClass('hide');
            $(tableSelector[data['Search-type']]).closest('.search-containers').addClass('search-containers-spacer');

            if ($.trim(data['Search-name']) == '')
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], noResultsData);
            else if ($.isDefined(cachedSearchs[data['Search-type']][data['Search-name']]))
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], cachedSearchs[data['Search-type']][data['Search-name']]);
            else
                retrieve(searchUrls.card, data);

            return false;
        });
        $('#card_holder_name_modal').on('keydown', function(event)
        {
            if(event.keyCode == '13')
                $('#btn_card_holder_name_modal').trigger('click');
        });
    }
    if ($('#btn_card_holder_uid_modal').length > 0)
    {
        $('#btn_card_holder_uid_modal').on('click', function()
        {
            var fieldId = $(this).attr('id').replace('btn_', '');
            var data = {'Search-type': 'no-access',
                        'Search-uid': $.trim($('#' + fieldId).val()),
                        'Search-user_id': $('#user_id').val(),
                        'field_id': 'grp_' + fieldId};

            noResultsData[0]['type'] = data['Search-type'];
            noResultsData[0]['errors'] = ['A full 9 digit UCLA UID is required'];

            $(tableSelector[data['Search-type']]).removeClass('hide');
            $(tableSelector[data['Search-type']]).closest('.search-containers').addClass('search-containers-spacer');

            if ($.trim(data['Search-uid']) == '')
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], noResultsData);
            else if ($.isDefined(cachedSearchs[data['Search-type']][data['Search-uid']]))
                drawCardHolderTable(data.field_id, tableSelector[data['Search-type']], cachedSearchs[data['Search-type']][data['Search-uid']]);
            else
            {
                if (isValidUID(data['Search-uid']))
                    retrieve(searchUrls.card, data);
                else
                    showPopover('#' + data['field_id'], noResultsData[0]['errors']);
            }

            return false;
        });
        $('#card_holder_uid_modal').on('keydown', function(event)
        {
            if(event.keyCode == '13')
                $('#btn_card_holder_uid_modal').trigger('click');
        });
    }
    //--------------------------------------------
    if ($('#door_plan').length > 0)
    {
        $('#door-plans').dataTable({"info": false,
                                    "ordering": false,
                                    "searching": false,
                                    "lengthChange": false,
                                    "pageLength": 25});
    }
    //==> Needed for forms with only one text entry
    $('form').on('submit', function()
    {
        return false;
    });
    //--------------------------------------------
});
function isValidUID(value)
{
    var result = true;
    var pattern = /^\d+$/;

    value = $.trim(value);
    if ((value.length < 9 || value.length > 9) || !pattern.test(value))
        result = false;

    return result;
}
function hidePopover(selector)
{
    $(selector).popover('destroy');
}
function showPopover(selector, content)
{
    $(selector).popover({'html': true,
                         'trigger': 'manual',
                         'title': '<img src="' + ($.isEmpty(baseUrl) ? '' : baseUrl) + '/img/24x24/info.png" border="0">Hint',
                         'content': content}).popover('show');
}
function cardHolderUrl(data)
{
    return ($.isEmpty(baseUrl) ? '' : baseUrl) + '/card_holder?uid=' + data.uid;
}
function drawCardHolderTable(fieldId, selector, data)
{
    var dataSet = [];
    var rowCNT = data.length;
    var hidePopup = true;
    var url = '';

    $(selector).removeClass('hide');
    $(selector + ' tbody.search-content tr').remove();

    for (var loopCNT = 0; loopCNT < rowCNT; loopCNT++)
    {
        url = '<a href="' + (data[loopCNT]['type'] == 'no-access' ? '#' : cardHolderUrl(data[loopCNT])) + '" ' +
              'data-uid="' + data[loopCNT]['uid'] + '" ' +
              'data-first_name="' + data[loopCNT]['first_name'] + '" ' +
              'data-last_name="' + data[loopCNT]['last_name'] + '" ' +
              (data[loopCNT]['type'] == 'no-access' ? ' onclick="return addToTable(this);"' : '') +
              '>' + data[loopCNT].value + '</a>';

        dataSet.push(['&nbsp;', (data[loopCNT].uid == '' ? data[loopCNT].value : url)]);
    }
    $(".popover").not("#" + fieldId).popover('destroy');
    if ((rowCNT == 1 && noResultsData[0].value.toLowerCase() == data[0].value.toLowerCase()) || rowCNT > 250)
    {
        if ($.isDefined(data[0].errors[0]))
        {
            showPopover("#" + fieldId, data[0].errors[0]);
            hidePopup = false;
        }
    }

    if (hidePopup)
        hidePopover("#" + fieldId);

    var params = {"info": false,
                  "ordering": false,
                  "searching": false,
                  "lengthChange": false,
                  "pageLength": 25,
                  "bDestroy": true,
                  "bAutoWidth": false,
                  "dom": '<"top"<"clear">>rt<"bottom"fp<"clear">>',
                  "data": dataSet,
                  fnDrawCallback: function(){
                    var selector = '#' + $(this).attr('id');
                    var rowsPerPage = this.fnSettings()._iDisplayLength;
                    var rowsToShow = this.fnSettings().fnRecordsDisplay();

                    hidePagination(selector, rowsToShow <= rowsPerPage || rowsPerPage == -1);
                  },
                  "columns":
                  [
                    { "title": "" },
                    { "title": "BruinCard Holder" }
                  ]};

    if (data[0]['type'] == 'no-access')
    {
        if (rowCNT > 10)
            params["scrollY"] = "150px";
    }
    else
        params["scrollY"] = "550px";

    $(selector).dataTable(params);

    $(tableSelector[data[0]['type']]).removeClass('hide');
}
function drawDoorPlanTable(fieldId, selector, data)
{
    var rowCNT = data.length;
    var dataSet = [];
    var hidePopup = true;

    $(selector).removeClass('hide');
    $(selector + ' tbody.search-content tr').remove();
    for (var loopCNT = 0; loopCNT < rowCNT; loopCNT++)
    {
        dataSet.push(['&nbsp;', (data[loopCNT].plan_id == '' ? data[loopCNT].value : '<a href="' + ($.isEmpty(baseUrl) ? '' : baseUrl) + '/door_plans?plan_id=' + data[loopCNT].plan_id + '">' + data[loopCNT].value + '</a>')]);
    }
    $(".popover").not("#" + fieldId).popover('destroy');
    if ((rowCNT == 1 && noResultsData[0].value.toLowerCase() == data[0].value.toLowerCase()) || rowCNT > 250)
    {
        if ($.isDefined(data.errors[0]))
        {
            showPopover("#" + fieldId, data.errors[0]);
            hidePopup = false;
        }
    }

    if (hidePopup)
        hidePopover("#" + fieldId);

    $('#door-plans').dataTable({"info": false,
                                "ordering": false,
                                "searching": false,
                                "lengthChange": false,
                                "pageLength": 25,
                                "bDestroy": true,
                                "bAutoWidth": false,
                                "dom": '<"top"<"clear">>rt<"bottom"fp<"clear">>',
                                "data": dataSet,
                                fnDrawCallback: function(){
                                    var selector = '#' + $(this).attr('id');
                                    var rowsPerPage = this.fnSettings()._iDisplayLength;
                                    var rowsToShow = this.fnSettings().fnRecordsDisplay();

                                    hidePagination(selector, rowsToShow <= rowsPerPage || rowsPerPage == -1);
                                },
                                "scrollY": "450px",
                                "columns":
                                [
                                    { "title": "" },
                                    { "title": "BruinCard Access Plans" }
                                ]});
}
function hidePagination(selector, state)
{
    if (state)
        $(selector + '_paginate').hide();
    else
        $(selector + '_paginate').show();
}
function clearTable()
{
    $('#door-plan-assign tr').remove();
}
function addToTable(object)
{
    var html = '';

    //==> Make sure it doesn't exist before adding
    if ($('tr[data-id=' + $(object).attr('data-uid') + ']').length == 0)
    {
        html = "<tr data-id=\"" + $(object).attr('data-uid') + "\">" +
               "<td>" +
               "<td>(p) " + $(object).attr('data-first_name') + ' ' + $(object).attr('data-last_name') + "</td>" +
               "</tr>";

        $('#door-plan-assign tbody').append(html);
        $('#mod_assign-access .modal-footer .btn-primary').enable();
    }
    $(object).closest('tr').remove();
}
function onSelected($e, value, name) 
{
    if(value.type == 'card')
    {   
        ids.card = value.uid;
        if (ids.card == '')
            $('#card_holder').val('');
    }
    else if (value.type == 'door')
    {
        ids.door = value.plan_id;
        if (ids.door == '')
            $('#door_plan').val('');
    }
    else if (value.type == 'no-access')
    {
        ids['no-access'] = value;

        if (ids['no-access'].uid == '')
            $('#card_holder_add').val('');
    }
}
function retrieve_complete(data)
{
    var xml = data.response;
    var errors = new Array();
    var hideBlockMessage = true;
    
    if ($.isEmpty(data.error))
    {
            $(xml).find("error").each
            (
                function()
                {
                    if (!$.isEmpty($(this).text()))
                        errors.push($(this).text());

                    if (!status && errors.length == 0)
                        errors.push("Unknown error. Please try again.");
                }
            );
            if (errors.length == 0)
            {
                if (data.params['Search-type'] == "card" || data.params['Search-type'] == "no-access")
                {
                    if ($.isDefined(data.params['Search-uid']))
                        cachedSearchs[data.params['Search-type']][data.params['Search-uid']] = data.response;
                    else
                        cachedSearchs[data.params['Search-type']][data.params['Search-name']] = data.response;

                    if ($.isEmpty(data.response[0].value))
                    {
                        data.response[0].value = noResultsData[0].value;
                        if ($.isDefined(data.params['Search-uid']))
                            data.response[0].errors = ['UCLA UID not found'];
                        else
                            data.response[0].errors = ['Card Holder Name not found'];
                    }
                    else if(data.response.length == 1 && data.params['Search-type'] == "card")
                    {
                        hideBlockMessage = false;
                        location.href = cardHolderUrl(data.response[0]);
                    }
                    //==> No need to redraw if only one record
                    if (hideBlockMessage)
                        drawCardHolderTable(data.params['field_id'], tableSelector[data.params['Search-type']], data.response);
                }
                else if (data.params['Search-type'] == "door")
                {
                    if ($.isEmpty(data.response[0].value))
                    {
                        data.response[0].value = noResultsData[0].value;
                        data.response[0].errors = ['Please refine your search by entering building name or door number'];
                    }
                    drawDoorPlanTable(data.params['field_id'], tableSelector[data.params['Search-type']], data.response);
                }
            }
    }
    else
            errors.push(data.error);

    if (errors.length > 0)
    {
        
    }
    if (hideBlockMessage)
        $.blockMessage.hide(tableSelector[data.params['Search-type']]);
}
function retrieve(url, data)
{
    $.xhrPool.abortAll();

    if (!$.blockMessage.visible)
        $.blockMessage.show(tableSelector[data['Search-type']]);

    //==> Hide all popovers
    hidePopover('.popover');
    $.request.get(($.isEmpty(baseUrl) ? '' : baseUrl + url), {"data": data, "callback": retrieve_complete});
}
/*
bindWithDelay jQuery plugin
Author: Brian Grinstead
MIT license: http://www.opensource.org/licenses/mit-license.php

http://github.com/bgrins/bindWithDelay
http://briangrinstead.com/files/bindWithDelay

Usage:
    See http://api.jquery.com/bind/
    .bindWithDelay( eventType, [ eventData ], handler(eventObject), timeout, throttle )

Examples:
    $("#foo").bindWithDelay("click", function(e) { }, 100);
    $(window).bindWithDelay("resize", { optional: "eventData" }, callback, 1000);
    $(window).bindWithDelay("resize", callback, 1000, true);
*/

(function($) {

$.fn.bindWithDelay = function( type, data, fn, timeout, throttle ) {

    if ( $.isFunction( data ) ) {
        throttle = timeout;
        timeout = fn;
        fn = data;
        data = undefined;
    }

    // Allow delayed function to be removed with fn in unbind function
    fn.guid = fn.guid || ($.guid && $.guid++);

    // Bind each separately so that each element has its own delay
    return this.each(function() {

        var wait = null;

        function cb() {
            var e = $.extend(true, { }, arguments[0]);
            var ctx = this;
            var throttler = function() {
                wait = null;
                fn.apply(ctx, [e]);
            };

            if (!throttle) { clearTimeout(wait); wait = null; }
            if (!wait) { wait = setTimeout(throttler, timeout); }
        }

        cb.guid = fn.guid;

        $(this).bind(type, data, cb);
    });
};

})(jQuery);